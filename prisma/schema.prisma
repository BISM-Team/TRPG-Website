generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String
  password  String

  modifier_in Heading[] @relation("Modifier")
  viewer_in   Heading[] @relation("Viewer")

  dashboards           Dashboard[]
  dashboards_templates DashboardTemplate[]
  Campaign_User        Campaign_User[]
  Character            Character[]
}

enum Role {
  gm
  member
}

model Campaign_User {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  role Role

  @@id([userId, campaignId])
  @@index([userId])
  @@index([campaignId])
}

model Campaign_Character {
  characterId String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([characterId, campaignId])
  @@index([characterId])
  @@index([campaignId])
}

model Campaign {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  /// [WikiTree]
  wikiTree  Json

  Page               Page[]
  Dashboard          Dashboard[]
  Campaign_User      Campaign_User[]
  Campaign_Character Campaign_Character[]
}

model Page {
  name       String
  createdAt  DateTime  @default(now())
  hash       String    @default(cuid())
  /// [Root]
  content    Json
  headings   Heading[]
  campaignId String
  campaign   Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([name, campaignId])
  @@index([campaignId])
}

model Heading {
  id             String @id
  text           String
  level          Int
  index          Int
  pageName       String
  pageCampaignId String
  page           Page   @relation(fields: [pageName, pageCampaignId], references: [name, campaignId], onDelete: Cascade, onUpdate: Cascade)
  modifiers      User[] @relation("Modifier")
  viewers        User[] @relation("Viewer")

  @@index([pageName, pageCampaignId])
}

enum DashboardType {
  dashboard
  character_sheet
}

model DashboardTemplate {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now())
  name             String
  numericVariables NumericVariable[]
  stringVariables  StringVariable[]
  cards            CardData[]

  type DashboardType

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model Dashboard {
  id               String            @id @default(cuid())
  name             String
  numericVariables NumericVariable[]
  stringVariables  StringVariable[]
  cards            CardData[]

  type DashboardType

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  campaignId String?
  campaign   Campaign? @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  character Character?

  @@index([userId])
  @@index([campaignId])
}

model NumericVariable {
  id    String  @id @default(cuid())
  name  String
  value Int
  show  Boolean @default(false)

  dashboardId String?
  dashboard   Dashboard? @relation(fields: [dashboardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  templateId String?
  template   DashboardTemplate? @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([dashboardId])
  @@index([templateId])
}

model StringVariable {
  id    String  @id @default(cuid())
  name  String
  value String
  show  Boolean @default(false)

  dashboardId String?
  dashboard   Dashboard? @relation(fields: [dashboardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  templateId String?
  template   DashboardTemplate? @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([dashboardId])
  @@index([templateId])
}

enum CardType {
  page
  property
  who_this
}

model CardData {
  id         String   @id @default(cuid())
  index      Int
  width      Float
  height     Float
  type       CardType
  /// [NonNullJson]
  properties Json

  dashboardId String?
  dashboard   Dashboard? @relation(fields: [dashboardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  templateId String?
  template   DashboardTemplate? @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([dashboardId])
  @@index([templateId])
}

model Character {
  id         String    @id @default(cuid())
  name       String
  createdAt  DateTime  @default(now())
  /// [NonNullJson]
  properties Json
  abilities  Ability[]
  items      Item[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  dashboardId        String               @unique
  dashboard          Dashboard            @relation(fields: [dashboardId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  Campaign_Character Campaign_Character[]

  @@index([userId])
  @@index([dashboardId])
}

model Item {
  id      String   @id @default(cuid())
  name    String   @unique
  effects Effect[]

  characters Character[]
}

model Ability {
  id         String      @id @default(cuid())
  name       String      @unique
  effects    Effect[]
  characters Character[]
}

model Effect {
  id        String   @id @default(cuid())
  reads     String
  modifies  String
  fn        String
  priority  Int      @default(0)
  Item      Item?    @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId    String?
  Ability   Ability? @relation(fields: [abilityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  abilityId String?

  @@index(itemId)
  @@index(abilityId)
}
